#include <GL/glut.h>
#include<iostream>
#include<math.h>
using namespace std;

void init(void)
{
    glClearColor(1.0, 1.0, 1.0, 0.0); // set display-window color to white
    glMatrixMode(GL_PROJECTION); // set projection parameters
    gluOrtho2D(0.0, 200.0, 0.0, 150.0);
}

void setPixel(GLint x, GLint y)
{
    glBegin(GL_POINTS);
    glVertex2i(x, y); // plot pixel at position (x, y)
    glEnd();
}

void ellipseMidpoint(int xCenter, int yCenter, int Rx, int Ry)
{
    int Rx2 = Rx * Rx;
    int Ry2 = Ry * Ry;
    int twoRx2 = 2 * Rx2;
    int twoRy2 = 2 * Ry2;
    int p;
    int x = 0;
    int y = Ry;
    int px = 0;
    int py = twoRx2 * y;

    // Plot the initial point in each quadrant
    setPixel(xCenter + x, yCenter + y);
    setPixel(xCenter - x, yCenter + y);
    setPixel(xCenter + x, yCenter - y);
    setPixel(xCenter - x, yCenter - y);

    // Region 1
    p = round(Ry2 - (Rx2 * Ry) + (0.25 * Rx2));
    while (px < py)
    {
        x++;
        px = px + twoRy2;
        if (p < 0)
            p = p + Ry2 + px;
        else
        {
            y--;
            py = py - twoRx2;
            p = p + Ry2 + px - py;
        }
        // Plot point in each quadrant
        setPixel(xCenter + x, yCenter + y);
        setPixel(xCenter - x, yCenter + y);
        setPixel(xCenter + x, yCenter - y);
        setPixel(xCenter - x, yCenter - y);
    }

    // Region 2
    p = round(Ry2 * (x + 0.5) * (x + 0.5) + Rx2 * (y - 1) * (y - 1) - Rx2 * Ry2);
    while (y > 0)
    {
        y--;
        py = py - twoRx2;
        if (p > 0)
            p = p + Rx2 - py;
        else
        {
            x++;
            px = px + twoRy2;
            p = p + Rx2 - py + px;
        }
        // Plot point in each quadrant
        setPixel(xCenter + x, yCenter + y);
        setPixel(xCenter - x, yCenter + y);
        setPixel(xCenter + x, yCenter - y);
        setPixel(xCenter - x, yCenter - y);
    }
}

void displayEllipse(void)
{
    glClear(GL_COLOR_BUFFER_BIT); // clear display window
    glColor3f(0.0, 0.0, 1.0); // set pixel color to blue
    glPointSize(4.0); // set pixel size to 4 by 4 area
    ellipseMidpoint(100, 75, 50, 25); // call midpoint ellipse algorithm
    glFlush(); // process all OpenGL routines as quickly as possible
}

int main(int argc, char **argv)
{
    glutInit(&argc, argv); // initialize GLUT
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB); // set display mode
    glutInitWindowPosition(50, 100); // set top-left display-window position
    glutInitWindowSize(400, 300); // set display-window width and height
    glutCreateWindow("Midpoint Ellipse Drawing Algorithm"); // create display window
    init(); // execute initialization procedure
    glutDisplayFunc(displayEllipse); // send graphics to display window
    glutMainLoop(); // display everything and wait
    return 0;
}