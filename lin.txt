#include <GL/glut.h>
#include <math.h>

void init() {
    glClearColor(1.0, 1.0, 1.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-400, 400, -400, 400);
}

void DDA(int x1, int y1, int x2, int y2) {
    int dx = x2 - x1;
    int dy = y2 - y1;
    int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);
    float xinc = dx / (float)steps;
    float yinc = dy / (float)steps;
    float x = x1, y = y1;
    glBegin(GL_POINTS);
    glColor3f(1.0, 0.0, 0.0);
    for (int i = 0; i < steps; i++) {
        glVertex2f(x, y);
        x += xinc;
        y += yinc;
    }
    glEnd();
}

void Bresenham(int x1, int y1, int x2, int y2) {
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    int x = x1, y = y1;
    int incx = x2 > x1 ? 1 : -1;
    int incy = y2 > y1 ? 1 : -1;
    int p = 2 * dy - dx;
    glBegin(GL_POINTS);
    glColor3f(0.0, 0.0, 1.0);
    while (x != x2 || y != y2) {
        glVertex2f(x, y);
        if (p >= 0) {
            y += incy;
            p += 2 * (dy - dx);
        }
        else {
            p += 2 * dy;
        }
        x += incx;
    }
    glEnd();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    DDA(-200, -200, 200, 200);
    Bresenham(200, -200, -200, 200);
    glFlush();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(800, 800);
    glutInitWindowPosition(0, 0);
    glutCreateWindow("OpenGL DDA and Bresenham");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
